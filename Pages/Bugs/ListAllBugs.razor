@using BugBlaze.Data.Models

@page "/listallbugs"

@inject CustomHttpClient Http
@inject AppSettingsService AppSettingsService
@inject NavigationManager NavigationManager

<h2>Bugs</h2>
<p>
    <a href="/createbug">Create New Bug</a>
</p>
@if (bugs == null)
{
    <img src="./spinner.gif" />

}
else
{
    <h3>All Bugs</h3>
    <table class='table'>
        <thead>
            <tr>
                <th>Project</th>
                <th>Description</th>
                <th>Component</th>
                <th>Severity</th>
                <th>Resolved</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var key in projBug)
            {
            <tr>
                <td>@key.Value.ProjectName</td>
                <td>@key.Key.Description</td>
                <td>@key.Key.Component</td>
                <td>
                    @{
                        switch (key.Key.Severity)
                        {
                            case 1:
                                <span class="badge rounded-pill bg-primary text-light" id="colored-pill">Low</span>
                                break;
                            case 2:
                                <span class="badge rounded-pill bg-success text-light" id="colored-pill">Medium</span>
                                break;
                            case 3:
                                <span class="badge rounded-pill bg-warning text-dark" id="colored-pill">High</span>
                                break;
                            case 4:
                                <span class="badge rounded-pill bg-danger text-light" id="colored-pill">Critical</span>
                                break;
                            default:
                                <span class="badge rounded-pill bg-success text-light" id="colored-pill">Medium</span>
                                break;
                        }
                    }

                </td>
                <td>
                    @{
                        if (key.Key.Resolved)
                        {
                            <span class="badge rounded-pill bg-success text-light" id="colored-pill">Resolved</span>
                        }
                        else
                        {
                            <span class="badge rounded-pill bg-danger text-light" id="colored-pill">Not Resolved</span>
                        }
                    }
                </td>
                <td class="btn-group">
                    @*<button class="btn btn-info rounded-pill" href='/editbug/@key.Key.Id'>Edit</button>*@
                    <button type="button" class="btn btn-primary has-icon" href='/editbug/@key.Key.Id'>
                        <i class="bi bi-pencil-square"></i>
                        <span>Edit</span>
                    </button>
                    <button type="button" class="btn btn-danger has-icon" href='/deletebug/@key.Key.Id'>
                        <i class="bi bi-trash-fill"></i>
                        <span>Delete</span>
                    </button>
                    @*<button class="btn btn-danger rounded-pill" href='/deletebug/@key.Key.Id'>Delete</button>*@
                </td>
            </tr>



            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public string id { get; set; }

    IEnumerable<Bug> bugs;
    @*Bug[] bugs;*@
    @*Project[] projects;*@
IEnumerable<Project> projects;
Dictionary<Bug, Project> projBug;

string baseUrl;



protected override async Task OnInitializedAsync()
{
    projBug = new Dictionary<Bug, Project>();
    baseUrl = AppSettingsService.GetBaseUrl();
    bugs = await Http.GetJsonAsync<IEnumerable<Bug>>(baseUrl + "/api/bugsapi");
    projects = await Http.GetJsonAsync<IEnumerable<Project>>(baseUrl + "/api/projectsapi");

    if (bugs != null)
    {
        foreach (Bug bug in bugs)
        {
            foreach (Project proj in projects)
            {
                if (int.Parse(bug.ProjectId) == proj.Id)
                {
                    projBug.Add(bug, proj);
                }
            }
        }
    }
}

}     